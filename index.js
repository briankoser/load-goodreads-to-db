const sosoreadsLib = require('sosoreads');
const db = require('./db')


// constants
const goodreadsDeveloperKey = ''; // todo: move to credentials file
const pageSize = 1;
const goodreadsUserIds = ['4812558'];

const sosoreadsOptions = {
    "goodreads_developer_key": goodreadsDeveloperKey
};
const sosoreads = sosoreadsLib(sosoreadsOptions);



// main flow
// load multiple users
// saveUsersReviews()
//     .then(results => {
//         console.log(results);
//     })
//     .catch(err => {
//         console.log(err);
//     });

// load single user
saveUserReviewsAsync('4812558')
    .then(results => console.log(`Goodreads pages loaded: ${results}`))
    .catch(err => console.log(err));



// db functions
async function insertAuthorAsync (author) {
    const query = 'INSERT INTO books.author (name, goodreadsratingsaverage, goodreadsauthorid, goodreadsratingscount, goodreadsurl, "timestamp") VALUES ($1, $2, $3, $4, $5, current_timestamp) RETURNING id';
    const values = [author.name, author.ratings.average, author.id, author.ratings.count, author.url];
    const res = await db.query(query, values);
    const id = res.rows[0]?.id;
    console.log(`Inserted Author: ${id}`);
    return id;
}

async function insertAuthorBookAsync (bookId, authorId) {
    await db.query('INSERT INTO books.author_book (bookid, authorid) VALUES ($1, $2)', [bookId, authorId])
        .then(res => console.log('Inserted author_book'))
}

async function insertBookAsync (book) {
    const query = 'INSERT INTO books.book (name, descriptionfull, descriptionshort, goodreadsbookid, goodreadsratingsaverage, goodreadsratingscount, goodreadsurl, imagelarge, imagesmall, isbn, isbn13, pagecount, publicationyear, "timestamp") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, current_timestamp) RETURNING id';
    const values = [book.title, book.descriptions.short, book.descriptions.full, book.id, book.ratings.average, book.ratings.count, book.url, book.images.large, book.images.small, book.isbn, book.isbn13, book.edition.pageCount, book.edition.year];
    const res = await db.query(query, values);
    const id = res.rows[0]?.id;
    console.log(`Inserted Book: ${id}`);
    return id;
}

async function insertBookBookShelfAsync (bookId, shelfId) {
    await db.query('INSERT INTO books.book_bookshelf (bookid, bookshelfid, "timestamp") VALUES ($1, $2, current_timestamp)', [bookId, shelfId])
        .then(res => console.log('Inserted book_bookshelf'))
        .catch(e => console.log(`book_bookshelf already exists for ${bookId} and ${shelfId}`));
}

async function insertReviewAsync (review, userBookId) {
    const query = 'INSERT INTO books.review (isspoiler, body, dateadded, dateended, datestarted, dateupdated, goodreadsreviewid, goodreadsurl, rating, userbookid) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id';
    const values = [review.isSpoiler ?? false, review.body, review.dates.add, review.dates.end, review.dates.start, review.dates.update, review.id, review.url, review.rating, userBookId];
    const res = await db.query(query, values);
    const id = res.rows[0]?.id;
    console.log(`Inserted Review: ${id}`);
    return id;
}

async function insertShelfAsync (shelf) {
    const query = 'INSERT INTO books.userbookshelf (name, goodreadsshelfid, userbookshelftypeid) VALUES ($1, $2, $3) RETURNING id';
    // New shelves imported from Goodreads will always be UserBookShelves, type AutoGenerated (ShelfTypeID 1)
    const values = [shelf.name, shelf.id, 1];
    const res = await db.query(query, values);
    const id = res.rows[0]?.id;
    console.log(`Inserted Shelf: ${id}`);
    return id;
}

async function insertUserBookAsync (bookId, userId) {
    const res = await db.query('INSERT INTO books.userbook(bookid, userid) VALUES ($1, $2) RETURNING id', [bookId, userId]);
    const id = res.rows[0]?.id;
    console.log(`Inserted UserBook: ${id}`);
    return id;
}

async function insertUserBookBookShelfAsync (userBookId, shelfId) {
    await db.query('INSERT INTO books.userbook_userbookshelf (userbookid, userbookshelfid, "timestamp") VALUES ($1, $2, current_timestamp)', [userBookId, shelfId])
        .then(res => console.log('Inserted userbook_userbookshelf'))
        .catch(e => console.log(`userbook_userbookshelf already exists for ${userBookId} and ${shelfId}`));
}

async function queryAuthorIdsAsync (goodreadsAuthorIds) {
    const res = await db.query(`SELECT id, goodreadsAuthorId FROM books.author WHERE author.goodreadsauthorid IN ('${goodreadsAuthorIds.join("','")}')`);
    return res.rows;
}

async function queryBookIdAsync (goodreadsBookId) {
    const res = await db.query('SELECT id FROM books.book WHERE book.goodreadsbookid = $1::text', [goodreadsBookId]);
    let id = res.rows[0]?.id;
    return id;
}

async function queryShelfIdsAsync(goodreadsShelfIds) {
    const shelves = goodreadsShelfIds.join("','");
    const res = await db.query(`SELECT id, 'BOOK' AS shelftype, goodreadsshelfid FROM books.bookshelf WHERE goodreadsshelfid IN ('${shelves}')
    UNION ALL
    SELECT id, 'USER' AS shelftype, goodreadsshelfid FROM books.userbookshelf WHERE goodreadsshelfid IN ('${shelves}')`);
    return res.rows;
}

async function queryDoesReviewExistAsync(goodreadsReviewId) {
    const res = await db.query('SELECT count(*) > 0 as doesexist FROM books.review WHERE goodreadsreviewid = $1::text', [goodreadsReviewId]);
    const doesExist = res.rows[0].doesexist;
    return doesExist;
}

async function queryUserBookIdAsync(goodreadsBookId, userId) {
    const res = await db.query('SELECT userbook.id FROM books.userbook JOIN books.book ON userbook.bookid = book.id WHERE book.goodreadsbookid = $1::text AND userbook.userid = $2', [goodreadsBookId, userId]);
    const id = res.rows[0]?.id;
    return id;
}

async function queryUserIdAsync(goodreadsUserId) {
    const res = await db.query('SELECT id FROM users.kodexuser WHERE goodreadsuserid = $1::text', [goodreadsUserId]);
    const id = res.rows[0]?.id;
    return id;
}



// functions
async function createAuthorBooksAsync (bookId, authorIds) {
    authorIds.forEach(async authorId => {
        await insertAuthorBookAsync(bookId, authorId);
    });
}

async function createBookBookShelfsAsync (bookId, bookShelfIds) {
    bookShelfIds.forEach(async shelfId => {
        await insertBookBookShelfAsync(bookId, shelfId);
    });
}

async function createUserBookBookShelfsAsync (userBookId, userBookShelfIds) {
    userBookShelfIds.forEach(async shelfId => {
        await insertUserBookBookShelfAsync(userBookId, shelfId);
    });
}

async function getAuthorIdsAsync (sosoreadsAuthors) {
    let goodreadsAuthorIds = sosoreadsAuthors.map(a => a.id);
    let dbAuthorIds = await queryAuthorIdsAsync(goodreadsAuthorIds);
    let authorIds = [];

    for (const sosoreadsAuthor of sosoreadsAuthors) {
        let authorId = dbAuthorIds.find(a => a.goodreadsauthorid === sosoreadsAuthor.id)?.id;
        
        if (authorId == undefined) {
            authorId = await insertAuthorAsync(sosoreadsAuthor);
        }
        
        authorIds.push(authorId);
    };

    return authorIds;
}

async function getShelfIdsAsync (sosoreadsShelves, shelfType) {
    let goodreadsShelfIds = sosoreadsShelves.map(s => s.id);
    let dbShelfIds = await queryShelfIdsAsync(goodreadsShelfIds);
    let shelfIds = [];

    for (const sosoreadsShelf of sosoreadsShelves) {
        let dbShelf = dbShelfIds.find(s => s.goodreadsshelfid === sosoreadsShelf.id);

        if (dbShelf == undefined) {
            let shelfId = await insertShelfAsync(sosoreadsShelf);
            
            if (shelfType === 'USER') {
                shelfIds.push(shelfId);
            }
        }
        else {
            if (shelfType === dbShelf.shelftype) {
                shelfIds.push(dbShelf.id);
            }
        }
    };

    return shelfIds;
}

async function getBookIdAsync (review) {
    let bookId = await queryBookIdAsync(review.book.id);
    
    if (bookId == undefined) {
        bookId = await insertBookAsync(review.book);
        let authorIds = await getAuthorIdsAsync(review.book.authors);
        await createAuthorBooksAsync(bookId, authorIds);
    }

    let shelfIds = await getShelfIdsAsync(review.book.shelves, 'BOOK');
    await createBookBookShelfsAsync(bookId, shelfIds);

    return bookId;
}

async function getUserBookIdAsync (review, userId) {
    let bookId = await getBookIdAsync(review);
    let userBookId = await queryUserBookIdAsync(review.book.id, userId);

    if (userBookId == undefined) {
        userBookId = await insertUserBookAsync(bookId, userId);
    }
    else {
        let bookShelfIds = await getShelfIdsAsync(review.book.shelves, 'BOOK');
        await createBookBookShelfsAsync(bookId, bookShelfIds);
    }
    
    let userbookShelfIds = await getShelfIdsAsync(review.book.shelves, 'USER');
    await createUserBookBookShelfsAsync(userBookId, userbookShelfIds);

    return userBookId;
}

async function saveUserReviewsAsync (goodreadsUserId) {
    let isSaveComplete = false;
    let page = 0;
    
    // loop saving a page of reviews until all are saved
    // while (!isSaveComplete) {
    while (page <= 5) {
        page += 1;
        const reviewsOptions = {
            "userId": goodreadsUserId,
            "paging": {
                "count": pageSize,
                "number": page
            },
            "shelf": "read"
        };

        // get page of reviews from Goodreads
        await sosoreads.getReviews(reviewsOptions)
            .then(async response => {
                // loop through reviews
                response.reviews.forEach(async sosoreadsReview => {
                    console.log(`sosoreadsReview id: ${sosoreadsReview.id}`);
                    
                    // check if review exists in db
                    let doesReviewExist = await queryDoesReviewExistAsync(sosoreadsReview.id);
                    if (doesReviewExist) {
                        console.log('review exists in db');
                        // if changes, update
                        // if no change, break from loop
                    }
                    else {
                        let userId = await queryUserIdAsync(goodreadsUserId);
                        let userBookId = await getUserBookIdAsync(sosoreadsReview, userId);
                        await insertReviewAsync(sosoreadsReview, userBookId);
                    }
                });

                // continue processing until the page has no reviews
                isSaveComplete = true; //response.reviews.length > 0;
            });
            
        // if every review in the page was new, save next page of reviews and loop again
        await sleep(1000);
    }

    return page;
};

function saveUsersReviews () {
    let saveUserReviewsArray = [];
    goodreadsUserIds.forEach(userId => saveUserReviewsArray.push(saveUserReviewsAsync(userId)));
    return Promise.all(saveUserReviewsArray);
}

function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
} 
